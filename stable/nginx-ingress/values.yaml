global:
  fullname: "nginx-ingress"

  name: "nginx-ingress"

  replicaCount: 1

controller:
  image:
    repository: nginx/nginx-ingress
    pullPolicy: IfNotPresent
    tag: "3.2"

  labels: {}

  # Deployment, DaemonSet or Both 
  kind: Deployment

  args: 

  # Ingress class resource default nginx-ingress
  ingressClass: ""

  # Election Id resource default ingress-controller-leader
  electionId: ""

  annotations: {}

  imagePullSecrets: []

  podAnnotations: {}

  podSecurityContext:
    {}
  
  # Security Context configuration
  securityContext:
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # Config container nginx-ingress-controller listens on 80 & 443
  containerPort: 
    http: 80
    https: 443
  
  # Service configuration
  service:
    create: true
    # Type of service default LoadBalancer
    type: ""
    enableHttp: true
    enableHttps: true
    targetPorts:
      http: 80 
      https: 443

    ports: 
      http: 80 

      https: 443

  nodeSelector: {}

  tolerations: []

  affinity: {}

  # Resources limit & request configuration
  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi

  # Autoscaling Deployment
  autoscaling:
    enabled: false
    minReplicas: 1
    # Nullable
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  scope:
    enabled: true
    namespace: 
  
  secret: 
    create: false
    tls:
      crt:
      key: 
    type: ""


ingressClassResource:
  create: true
  
  default: true
  
  controller: "nginx.org/ingress-controller"
  
  annotations: {}

# Service Account
serviceAccount:
  create: true

  annotations: 

  name: ""

rbac:
  create: true
  scope: false